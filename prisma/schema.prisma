// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique @default(cuid())
  setupComplete Boolean   @default(false)
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  buyer         Buyer?
  seller        Seller?
}

model Buyer {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String    @unique
  orders    Order[]
  carts     Cart?
  addresses Address[]
}

model Seller {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      String    @unique
  isActivated Boolean   @default(false)
  storeName   String
  storeEmail  String
  products    Product[]
  orders      Order[]
}

model Product {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  id           String     @id @default(cuid())
  title        String
  priceInCents String
  category     Category[]
  featured     Boolean    @default(false)
  description  String
  stock        Int        @default(10)
  sold         Int        @default(0)
  image        String
  seller       Seller     @relation(fields: [sellerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sellerId     String
  Bags         Bag[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]
}

model Cart {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  buyer     Buyer    @relation(fields: [buyerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  buyerId   String   @unique
  bags      Bag[]
}

model Bag {
  id         Int     @id @default(autoincrement())
  itemCount  Int
  item       Product @relation(fields: [productId], references: [id])
  Cart       Cart    @relation(fields: [cartId], references: [id])
  order      Order?  @relation(fields: [orderId], references: [id])
  selected   Boolean @default(false)
  checkedOut Boolean @default(false)
  cartId     String
  productId  String
  orderId    String?
}

model Order {
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  id                String      @id @default(cuid())
  status            OrderStatus @default(PROCESSING)
  payment           Payment?    @relation(fields: [paymentId], references: [id])
  paymentId         String?
  address           Address?    @relation(fields: [addressId], references: [id])
  addressId         String?
  buyer             Buyer       @relation(fields: [buyerId], references: [id])
  buyerId           String
  seller            Seller      @relation(fields: [sellerId], references: [id])
  sellerId          String
  totalPriceInCents String?
  Bag               Bag[]
}

model Payment {
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  id        String        @id @default(cuid())
  refId     String
  status    PaymentStatus @default(PENDING)
  Order     Order[]
}

model Address {
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           String   @id @default(cuid())
  isDefault    Boolean  @default(false)
  unitNumber   String?
  StreetNumber String?
  addressLine1 String
  addressLine2 String?
  city         String
  postalCode   String?
  region       String
  country      String
  buyer        Buyer    @relation(fields: [buyerId], references: [id])
  buyerId      String
  order        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  OUTOFSTOCK
  USERCANCELLED
  SELLERCANCELLED
  PROCESSING
  PACKED
  SHIPPED
  OUTFORDELIVERY
  DELIVERED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
